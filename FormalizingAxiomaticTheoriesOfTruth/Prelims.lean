import Mathlib.ModelTheory.Basic
import Mathlib.ModelTheory.Syntax

open FirstOrder
open Language

namespace String
  def vecToStr : ‚àÄ {n}, (Fin n ‚Üí String) ‚Üí String
  | 0,     _ => ""
  | n + 1, s => if n = 0 then s 0 else s 0 ++ ", " ++ @vecToStr n (fun i => s (Fin.succ i))

  #eval vecToStr !["a","b","c"]

end String

namespace Term
  variable {L : Language} {Œ± Œ≤ : Type}
  variable [‚àÄ k, ToString (L.Functions k)] [ToString Œ±] [ToString Œ≤]

  section ToString
    def toStr : Term L (Œ± ‚äï Œ≤) ‚Üí String :=
      fun t : Term L (Œ± ‚äï Œ≤) =>
        match t with
        | .var k =>
          match k with
            | (Sum.inl l) => "#" ++ toString l
            | (Sum.inr l) => "&" ++ toString l
        | .func (l := 0) c _ => toString c
        | .func (l := _ + 1) f ts => toString f ++ "(" ++ String.vecToStr (fun i => toStr (ts i)) ++ ")"

    instance : Repr (Term L (Œ± ‚äï Œ≤)) := ‚ü®fun t _ => toStr t‚ü©
    instance : ToString (Term L (Œ± ‚äï Œ≤)) := ‚ü®toStr‚ü©
  end ToString
end Term

namespace BoundedFormula
  section ToString
    variable {L : Language} {Œ± : Type}
    variable [‚àÄ k, ToString (L.Functions k)] [‚àÄ k, ToString (L.Relations k)] [ToString Œ±]

    def toStr {n} : BoundedFormula L Œ± n ‚Üí String
      | .falsum                    => "‚ä•"
      | .equal t‚ÇÅ t‚ÇÇ               => toString t‚ÇÅ ++ " = " ++ toString t‚ÇÇ
      | .rel R ts                  => toString R ++ "(" ++ String.vecToStr (fun i => toString (ts i)) ++ ")"
      | .imp f‚ÇÅ f‚ÇÇ                 => "(" ++ toStr f‚ÇÅ ++ " ‚Üí " ++ toStr f‚ÇÇ ++ ")"
      | .all f                     => "‚àÄ" ++ toStr f

    instance : Repr (BoundedFormula L Œ± n) := ‚ü®fun t _ => toStr t‚ü©
    instance : ToString (BoundedFormula L Œ± n) := ‚ü®toStr‚ü©
  end ToString
end BoundedFormula

namespace Languages
  namespace L_T

    inductive Func : ‚Ñï ‚Üí Type _ where
      | zero : Func 0
      | succ : Func 1
      | add : Func 2
      | mult : Func 2

    inductive Rel : ‚Ñï ‚Üí Type _ where
      | t : Rel 1

    def signature : Language :=
      ‚ü®Func, Rel‚ü©

    def funToStr {n}: Func n ‚Üí String
      | .zero => "0"
      | .succ => "S"
      | .add => "+"
      | .mult => "√ó"
    instance {n : ‚Ñï}: ToString (signature.Functions n) := ‚ü®funToStr‚ü©

    def relToStr {n} : signature.Relations n ‚Üí String
      | .t => "T"
    instance : ToString (signature.Relations n) := ‚ü®relToStr‚ü©

    /-
    Some useful notation
    -/
    prefix:60 "T" => Formula.rel Rel.t
    notation "‚Ñí‚Çú" => signature
  end L_T

  namespace LPA -- change to L
    inductive Func : ‚Ñï ‚Üí Type _ where
      | zero : Func 0
      | succ : Func 1
      | add : Func 2
      | mult : Func 2

    def signature : Language :=
      ‚ü®Func, fun _ => Empty‚ü©

    def funToStr {n}: Func n ‚Üí String
      | .zero => "0"
      | .succ => "S"
      | .add => "+"
      | .mult => "√ó"
    instance {n : ‚Ñï}: ToString (signature.Functions n) := ‚ü®funToStr‚ü©

    instance : ToString (Empty) := -- necessary for string function relations
      ‚ü® Empty.casesOn ‚ü©

    def relToStr {n} : signature.Relations n ‚Üí String :=
      fun _ => ""
    instance : ToString (signature.Relations n) := ‚ü®relToStr‚ü©

    /-
    Useful notation
    -/
    notation "S(" n ")" => Term.func Func.succ ![n]
    notation "zero" => Term.func Func.zero ![]
    notation n "add" m => Term.func Func.add ![n,m]
    notation n "times" m => Term.func Func.mult ![n,m]
    notation "‚Ñí‚Çö‚Çê" => signature

    /-
    Some useful terms
    -/
    def null : Term signature Œ± :=
      zero
    def numeral : ‚Ñï ‚Üí Term signature Œ±
      | .zero => zero
      | .succ n => S(numeral n)
  end LPA

  /-
  Some useful notation
  -/
  variable (l : Language)
  abbrev Fml : Type _ := Formula l ‚Ñï -- perhaps

  /-
  A homomorphism between PA.lpa and L_T.lt formulas is constructed, as all lpa formulas are
  also lt formulas.
  The homomorphism can be used to translate from ‚Ñí‚Çö‚Çê BoundedFormulas to ‚Ñí‚Çú BoundedFormulas using:
    - FirstOrder.Language.LHom.onBoundedFormula for BoundedFormulas
    - FirstOrder.Language.LHom.onFormula for Formulas
    - FirstOrder.Language.LHom.onSentence for Sentences and
    - FirstOrder.Language.LHom.onTheory for Theories.
  -/
  def to_lt_func ‚¶Én : ‚Ñï‚¶Ñ : (LPA.signature.Functions n) ‚Üí (L_T.signature.Functions n)
    | .zero => .zero
    | .succ => .succ
    | .add => .add
    | .mult => .mult

  def to_lt_rel ‚¶Én : ‚Ñï‚¶Ñ : (LPA.signature.Relations n) ‚Üí (L_T.signature.Relations n) :=
    Empty.casesOn -- i.e. there are no LPA relations

  def to_lt_t: Term ‚Ñí‚Çö‚Çê Œ± ‚Üí Term ‚Ñí‚Çú Œ±
    | .var Œ± => .var Œ±
    | .func (l := n) f ts => .func (to_lt_func f) (fun i : Fin n => to_lt_t (ts i))

  def to_lt_f: BoundedFormula ‚Ñí‚Çö‚Çê Œ± n ‚Üí BoundedFormula ‚Ñí‚Çú Œ± n
    | .falsum => .falsum
    | .equal t‚ÇÅ t‚ÇÇ => .equal (to_lt_t t‚ÇÅ) (to_lt_t t‚ÇÇ)
    | .imp f‚ÇÅ f‚ÇÇ => .imp (to_lt_f f‚ÇÅ) (to_lt_f f‚ÇÇ)
    | .all f => .all (to_lt_f f)

  example: ‚àÄœÜ:Fml ‚Ñí‚Çö‚Çê, ‚àÉœà:Fml ‚Ñí‚Çú, œà = to_lt_f œÜ :=
    fun a : Fml ‚Ñí‚Çö‚Çê => Exists.intro (to_lt_f a) (Eq.refl (to_lt_f a))

  def œï : LHom ‚Ñí‚Çö‚Çê ‚Ñí‚Çú where
    onFunction := to_lt_func
    onRelation := to_lt_rel

end Languages

namespace Calculus
  open Languages
  open BoundedFormula
  notation f "‚Üë'" n "#" m => liftAt n m f
  notation f "‚Üë" n => f ‚Üë' n # 0
  notation A "/[" t "]" => subst A (fun _ => t)
  inductive prf : Set (BoundedFormula L Œ± n) ‚Üí BoundedFormula L Œ≤ m ‚Üí Type _ where
  | axm Œì A : A ‚àà Œì ‚Üí prf Œì A
  | impI Œì A B : prf (insert A Œì) B ‚Üí prf Œì (A ‚üπ B)
  | impE Œì A B : prf Œì (A ‚üπ B) ‚Üí prf Œì A ‚Üí prf Œì B
  | falsumE Œì A : prf (insert ‚àºA Œì) ‚ä• ‚Üí prf Œì A
  | allI Œì A : prf ((Œªf => f ‚Üë 1) '' Œì) A ‚Üí prf Œì (‚àÄ' A)
  | allE‚ÇÇ Œì A t : prf Œì (‚àÄ' A) ‚Üí prf Œì (A/[t])
  | ref Œì t : prf Œì (t =' t')
  | subst‚ÇÇ Œì s t f : prf Œì (s =' t) ‚Üí prf Œì (f/[s]) ‚Üí prf Œì (f/[t])
end Calculus

namespace PA
  open ToString
  open Languages
  open LPA
  open BoundedFormula

  /-- Auxillary functions and definitions -/
  def succ_var : Term ‚Ñí‚Çö‚Çê (Empty ‚äï Fin 1) :=
    S(&0)
  def replace_bound_variable (œÜ : BoundedFormula ‚Ñí‚Çö‚Çê Empty 1) (t : Term ‚Ñí‚Çö‚Çê Empty) : Sentence ‚Ñí‚Çö‚Çê :=
    subst œÜ.toFormula (fun _ : Empty ‚äï Fin 1 => t)
  notation A "//[" t "]" => replace_bound_variable A t
  def g : (Empty ‚äï Fin 1) ‚Üí Empty ‚äï Fin 1 :=
    fun t => t

  /-- The induction function -/
  def induction (œÜ : BoundedFormula ‚Ñí‚Çö‚Çê Empty 1) : Sentence ‚Ñí‚Çö‚Çê :=
    ‚àº (œÜ//[LPA.null] ‚üπ (‚àº(‚àÄ'(œÜ ‚üπ (relabel g (œÜ.toFormula/[succ_var])))))) ‚üπ ‚àÄ'(œÜ)

  /-- Peano arithemtic -/
  inductive peano_arithmetic : Theory ‚Ñí‚Çö‚Çê where
  | first : peano_arithmetic (‚àÄ' ‚àº(LPA.null =' S(&0)))
  | second :peano_arithmetic (‚àÄ' ‚àÄ' ((S(&1) =' S(&0)) ‚üπ (&1 =' &0)))
  | third : peano_arithmetic (‚àÄ' ((&0 add LPA.null) =' &0))
  | fourth : peano_arithmetic (‚àÄ' ‚àÄ' ((&1 add S(&0)) =' S(&1 add &0)))
  | fifth : peano_arithmetic (‚àÄ' ((&0 times LPA.null) =' LPA.null))
  | sixth : peano_arithmetic (‚àÄ' ‚àÄ' ((&1 times S(&0)) =' ((&1 times &0)) add &1))
  | induction (œÜ) : peano_arithmetic (induction œÜ)

  notation "ùêèùêÄ" => peano_arithmetic

  /-
  A coercion from ‚Ñí‚Çö‚Çê Axioms to ‚Ñí‚Çú Axioms as all ‚Ñí‚Çö‚Çê Axioms are also
  ‚Ñí‚Çú Axioms -/
  def to_lt_T : Theory ‚Ñí‚Çö‚Çê ‚Üí Theory ‚Ñí‚Çú := by
    repeat rewrite[Theory]
    repeat rewrite[Set]
    intro set
    intro œÜ
    sorry
  -- inductive axioms : Theory ‚Ñí‚Çö‚Çê where
  -- | first :
end PA
